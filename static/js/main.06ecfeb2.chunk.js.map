{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","main","paddingTop","spacing","paddingBottom","buttons","margin","App","classes","useState","text","setText","ref","useRef","Box","width","height","AppBar","position","elevation","Toolbar","Typography","variant","Container","maxWidth","component","className","Card","CardContent","Grid","container","item","xs","TextField","inputRef","fullWidth","multiline","rows","value","onChange","event","target","Button","color","onClick","encodeURIComponent","current","focus","decodeURIComponent","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"+PAiBMA,EAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9CC,KAAM,CACJC,WAAYF,EAAMG,QAAQ,GAC1BC,cAAeJ,EAAMG,QAAQ,IAE/BE,QAAS,CACP,QAAS,CACPC,OAAQN,EAAMG,QAAQ,SAuFbI,EAlFH,WACV,IAAMC,EAAUV,IAChB,EAAwBW,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAMC,iBAA4B,MAYxC,OACE,eAACC,EAAA,EAAD,CAAKC,MAAM,OAAOC,OAAO,OAAzB,UACE,cAACC,EAAA,EAAD,CAAQC,SAAS,SAASC,UAAW,EAArC,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,qCAIJ,cAACC,EAAA,EAAD,CAAWC,SAAS,KAAKC,UAAU,OAAOC,UAAWlB,EAAQP,KAA7D,SACE,cAAC0B,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,EAAzB,UACE,cAAC0B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CACEC,SAAUtB,EACVuB,WAAS,EACTC,WAAS,EACTC,KAAM,GACNf,QAAQ,WACRgB,MAAO5B,EACP6B,SAAU,SAACC,GAAD,OAAW7B,EAAQ6B,EAAMC,OAAOH,YAI9C,eAACT,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIN,UAAWlB,EAAQH,QAAtC,UACE,cAACqC,EAAA,EAAD,CAAQpB,QAAQ,YAAYqB,MAAM,UAAUC,QAnC3C,WACbjC,EAAQkC,mBAAmBnC,IAC3BE,EAAIkC,QAAQC,SAiCA,oBAIA,cAACL,EAAA,EAAD,CAAQpB,QAAQ,YAAYqB,MAAM,YAAYC,QAlC7C,WACbjC,EAAQqC,mBAAmBtC,IAC3BE,EAAIkC,QAAQC,SAgCA,uBAKF,eAAClB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,UACE,eAACX,EAAA,EAAD,CAAYC,QAAQ,UAAUG,UAAU,IAAxC,+BACqB,IACnB,mBAAGwB,KAAK,+BAAR,qBAFF,mBAGQ,IACN,mBAAGA,KAAK,+CAAR,2BAKF,cAAC5B,EAAA,EAAD,CACEC,QAAQ,UACRqB,MAAM,gBACNlB,UAAU,IAHZ,0eC1EDyB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.06ecfeb2.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\n\nimport {\n  AppBar,\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Container,\n  Grid,\n  makeStyles,\n  TextField,\n  Theme,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  main: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n  },\n  buttons: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n  const [text, setText] = useState(\"\");\n  const ref = useRef<HTMLTextAreaElement>(null!);\n\n  const encode = () => {\n    setText(encodeURIComponent(text));\n    ref.current.focus();\n  };\n\n  const decode = () => {\n    setText(decodeURIComponent(text));\n    ref.current.focus();\n  };\n\n  return (\n    <Box width=\"100%\" height=\"100%\">\n      <AppBar position=\"static\" elevation={0}>\n        <Toolbar>\n          <Typography variant=\"h6\">URI Encoder/Decoder</Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Container maxWidth=\"md\" component=\"main\" className={classes.main}>\n        <Card>\n          <CardContent>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  inputRef={ref}\n                  fullWidth\n                  multiline\n                  rows={30}\n                  variant=\"outlined\"\n                  value={text}\n                  onChange={(event) => setText(event.target.value)}\n                />\n              </Grid>\n\n              <Grid item xs={12} className={classes.buttons}>\n                <Button variant=\"contained\" color=\"primary\" onClick={encode}>\n                  Encode\n                </Button>\n\n                <Button variant=\"contained\" color=\"secondary\" onClick={decode}>\n                  Decode\n                </Button>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Typography variant=\"caption\" component=\"p\">\n                  \"Scroll Emoji\", by{\" \"}\n                  <a href=\"https://twemoji.twitter.com/\">Twemoji</a>, licensed\n                  under{\" \"}\n                  <a href=\"https://creativecommons.org/licenses/by/4.0/\">\n                    CC-BY 4.0.\n                  </a>\n                </Typography>\n\n                <Typography\n                  variant=\"caption\"\n                  color=\"textSecondary\"\n                  component=\"p\"\n                >\n                  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY\n                  KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n                  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\n                  PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n                  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n                  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n                  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n                  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n                </Typography>\n              </Grid>\n            </Grid>\n          </CardContent>\n        </Card>\n      </Container>\n    </Box>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { CssBaseline } from \"@material-ui/core\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline>\n      <App />\n    </CssBaseline>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}